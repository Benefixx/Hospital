
import config

from main import dp, bot
from state.default_state import *
from keyboards.kb import *

import requests

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor


@dp.message_handler(text="üìï –ü–∞–Ω–µ–ª—å", state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in config.ADMINS:
        await message.answer_photo(
            photo="https://i.ibb.co/BC7h7ZP/image.png",
            caption=f"<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:</b> - {config.BACKEND_URL}/admin/\n\nAPI V1 (SWAGGER) - {config.BACKEND_URL}/swagger/\nAPI V2 (REDOC) - {config.BACKEND_URL}/redoc/\n\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n–õ–æ–≥–∏–Ω: <code>{config.login}</code>\n–ü–∞—Ä–æ–ª—å: <code>{config.password}</code>"
        )
    else: await message.answer("‚ùå –û–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å :)")


@dp.message_handler(text="üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏", state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in config.ADMINS:
        try:
            response = requests.get(config.BACKEND_URL + "/auth/visitor/").json()
            if response:
                for data in response:
                    patient = data['patient']
                    patient_response = requests.get(config.BACKEND_URL + f"/auth/patients/{patient}/").json()
                    text = f"""
–§–ò–û –ü–∞—Ü–∏–µ–Ω—Ç–∞: <code>{patient_response['first_name']} {patient_response['last_name']} {patient_response['patronymic']}</code>
–û—Ç–¥–µ–ª–µ–Ω–∏–µ: <code>{patient_response['branch']}</code>
–ü–∞–ª–∞—Ç–∞: <code>{patient_response['chamber']}</code>
–ú–µ–¥. –ü–æ–ª–∏—Å: <code>{patient_response['medical_number']}</code>
–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: <code>{patient_response['series']}</code>

–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: <code>{data['phone']}</code>
–í—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: <code>{data['visit_time']}</code>
"""

                    inline_kb_full = types.InlineKeyboardMarkup()
                    inline_kb_full.row(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"yes_patient:{data['id']}"), 
                                        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel_patient:{data['id']}"))
                    await message.answer_photo(
                        photo="https://www.meme-arsenal.com/memes/723c78e9be76eba2598c2d4c611f994c.jpg",
                        caption=text,
                        reply_markup=inline_kb_full,
                    )
            else: message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å .json() —Å —Å–µ—Ä–≤–µ—Ä–∞")
        except Exception as ex: await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: " + str(ex))
    else: await message.answer("‚ùå –û–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å :)")

 #  password: admin | username: admin

@dp.callback_query_handler(text_startswith="yes_patient", state="*")
async def find(call: types.CallbackQuery, state: FSMContext):
    ID = call.data.split(":")[1]
    try:
        response = requests.post(config.BACKEND_URL + "/auth/jwt/create/", data={
            "password": config.password,
            "username": config.login,
        }) \
            .json()
        JWT = response["access"]
        answer = requests.patch(config.BACKEND_URL + f"/auth/visitor/{ID}/", headers={
            "Authorization": "JWT " + JWT,
        }, data={
            "solution": True,
        }) \
            .json()
        if answer:
            await call.message.delete()
            await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
    except Exception as ex: await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ –ø–æ–∑–∂–µ! " + str(ex)) 

@dp.callback_query_handler(text_startswith="cancel_patient", state="*")
async def find(call: types.CallbackQuery, state: FSMContext):
    ID = call.data.split(":")[1]
    try:
        response = requests.post(config.BACKEND_URL + "/auth/jwt/create/", data={
            "password": config.password,
            "username": config.login,
        }) \
            .json()
        JWT = response["access"]
        answer = requests.patch(config.BACKEND_URL + f"/auth/visitor/{ID}/", headers={
            "Authorization": "JWT " + JWT,
        }, data={
            "solution": False,
        }) \
            .json()
        if answer:
            await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            await call.message.delete()
    except Exception as ex: await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ –ø–æ–∑–∂–µ! " + str(ex))



@dp.message_handler(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in config.ADMINS:
        text = """
<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ä–º—É:</b>
<code>1. –§–ò–û –ü–∞—Ü–∏–µ–Ω—Ç–∞
2. –°–µ—Ä–∏–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
3. –ú–µ–¥. –ü–æ–ª–∏—Å
4. –û—Ç–¥–µ–ª (–¢–µ—Ä–∞–ø–∏—è, –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è, –ù–µ–≤—Ä–æ–ª–æ–≥–∏—è, –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è, –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è)</code>

<b>–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>
<code>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
37 24 2024512
492199240201
–¢–µ—Ä–∞–ø–∏—è</code>
"""
        await message.answer_photo(
            photo="https://thumbs.dreamstime.com/b/%D0%B7%D0%B5%D0%BB%D0%B5%D0%BD%D1%8B%D0%B9-%D0%BD%D0%B5%D0%BE%D0%BD%D0%BE%D0%B2%D1%8B%D0%B9-%D0%BA%D1%80%D0%B5%D1%81%D1%82-%D0%BD%D0%B0-%D1%87%D0%B5%D1%80%D0%BD%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D0%BE%D0%B4%D0%B8%D0%BD-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82-%D0%B7%D0%BD%D0%B0%D0%BA-%D0%BF%D0%BB%D1%8E%D1%81-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F-222454480.jpg",
            caption=text
        )
        await PatientState.q.set()
    else: await message.answer("‚ùå –û–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å :)")


@dp.message_handler(state=PatientState.q)
async def start(message: types.Message, state: FSMContext):
    try:
        FIRST_NAME = message.text.split("\n")[0].split(" ")[1]
        LAST_NAME = message.text.split("\n")[0].split(" ")[0]
        PATRONYMIC = message.text.split("\n")[0].split(" ")[-1]
        SERIES = message.text.split("\n")[1]
        MEDICAL = message.text.split("\n")[2]
        BRANCH = message.text.split("\n")[3]


        response = requests.post(config.BACKEND_URL + "/auth/jwt/create/", data={
            "password": config.password,
            "username": config.login,
        }) \
            .json()
        JWT = response["access"]
        print(JWT)
        answer = requests.post(config.BACKEND_URL + "/auth/patients/", headers={
            "Authorization": "JWT " + JWT,
        }, data={
            "branch": BRANCH,
            "doctor": "1",
            "first_name": FIRST_NAME,
            "last_name": LAST_NAME,
            "medical_number": MEDICAL,
            "patronymic": PATRONYMIC,
            "series": SERIES,
        }) \
            # .json()
        print(FIRST_NAME, LAST_NAME, PATRONYMIC)
        print(SERIES, MEDICAL, BRANCH)
        if answer:
            await message.delete()
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç.")

    except Exception as ex: await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + str(ex))
    await state.finish()